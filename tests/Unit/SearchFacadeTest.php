<?php

namespace Jawabkom\Backend\Module\Profile\Test\Unit;

use Faker\Factory;
use Jawabkom\Backend\Module\Profile\Contract\IProfileComposite;
use Jawabkom\Backend\Module\Profile\Facade\SearchFacade;
use Jawabkom\Backend\Module\Profile\Service\CreateProfile;
use Jawabkom\Backend\Module\Profile\Test\AbstractTestCase;
use Jawabkom\Backend\Module\Profile\Test\Classes\DI;
use Jawabkom\Backend\Module\Profile\Test\Classes\DummyTrait;
use Jawabkom\Standard\Exception\MissingRequiredInputException;

class SearchFacadeTest extends AbstractTestCase
{
    use DummyTrait;
    private DI $di;
    /**
     * @var SearchFacade|mixed
     */
    private mixed $searchFacade;
    private \Faker\Generator $faker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->di = new DI();
        $this->faker = Factory::create();
        $this->searchFacade = $this->di->make(SearchFacade::class);
    }

    public function testSearchFacadeByEmailOffline(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $email = $dummyProfilesData[0]['emails'][0]['email'];
        $dummyProfilesData[2]['emails'][0]['email'] = $email;
        $dummyProfilesData[5]['emails'][0]['email'] = $email;
        unset( $dummyProfilesData[5]['phones']);
        $this->createProfile($dummyProfilesData);

        $resultComposites = $this->searchFacade->searchByEmail(email: $email);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }
    public function testSearchFacadeByAdvancedSearchWithEmailAndPhoneAndName(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $email = $dummyProfilesData[0]['emails'][0]['email'];
        $phone = $dummyProfilesData[0]['phones'][0]['original_number'];
        $username = $dummyProfilesData[0]['usernames'][0]['username'];
        $dummyProfilesData[2]['emails'][0]['email'] = $email;
        $dummyProfilesData[5]['emails'][0]['email'] = $email;
        unset( $dummyProfilesData[5]['phones']);
        $this->createProfile($dummyProfilesData);

        $resultComposites = $this->searchFacade->advancedSearch(phone: $phone, email: $email, username: $username);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByAdvancedSearchWithPhone(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $phone = $dummyProfilesData[0]['phones'][0]['original_number'];
        $countryCode = $dummyProfilesData[0]['phones'][0]['country_code'];
        $username = $dummyProfilesData[0]['usernames'][0]['username'];
        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->advancedSearch(phone: $phone, countryCode: $countryCode);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByAdvancedSearchWithUsername(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $username = $dummyProfilesData[0]['usernames'][0]['username'];
        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->advancedSearch(username: $username);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }


    public function testSearchFacadeByAdvancedSearchWithName(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $firstName = $dummyProfilesData[2]['names'][0]['first'];
        $middleName = $dummyProfilesData[2]['names'][0]['middle'];
        $lastName = $dummyProfilesData[2]['names'][0]['last'];
        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->advancedSearch(firstName: $firstName, middleName: $middleName, lastName: $lastName);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByAdvancedSearchWithEmailAndPhoneAndNameOnline(){
        $email    = 'fds@jawabkom.com';
        $phone    = '05527153514';
        $countryCode    = 'TR';
        $username = 'ahmadfds';
        $resultComposites = $this->searchFacade->advancedSearch(phone: $phone, email: $email, username: $username,countryCode: $countryCode,alias: ['pipl']);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByPhoneOffline(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $dummyProfilesData[5]['phones'][0]['possible_countries']=['TR'];
        $pc = $dummyProfilesData[5]['phones'][0]['possible_countries'];
        $phone =$dummyProfilesData[5]['phones'][0]['original_number'];
        $this->createProfile($dummyProfilesData);

        $resultComposites = $this->searchFacade->searchByPhone(phone:$phone,possibleCountries: ['TR']);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByNameOffline(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $name = $dummyProfilesData[1]['names'][0]['prefix'];
        $name .= ' '.$dummyProfilesData[2]['names'][0]['first'];
        $name .= ' '.$dummyProfilesData[2]['names'][0]['middle'];
        $name .= ' '.$dummyProfilesData[2]['names'][0]['last'];
        $dummyProfilesData[5]['names'][0]['prefix'] = $dummyProfilesData[2]['names'][0]['prefix'];
        $dummyProfilesData[5]['names'][0]['first'] = $dummyProfilesData[2]['names'][0]['first'];
        $dummyProfilesData[5]['names'][0]['middle'] = $dummyProfilesData[2]['names'][0]['middle'];
        $dummyProfilesData[5]['names'][0]['last']  = $dummyProfilesData[2]['names'][0]['last'];
        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->searchByName(name: $name);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }

    public function testSearchFacadeByUserNameOffline(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $username = $dummyProfilesData[1]['usernames'][0]['username'];
        unset($dummyProfilesData[1]['phones']);
        unset($dummyProfilesData[3]['phones']);
        $dummyProfilesData[1]['usernames'][0]['username'] = $username;
        $dummyProfilesData[2]['usernames'][0]['username'] = $username;
        $dummyProfilesData[3]['usernames'][0]['username'] = $username;
        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->searchByUsername(username: $username);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
        $this->assertCount(3,$resultComposites);
    }

    public function testSearchFacadeByAdvanceOffline(){
        $dummyProfilesData = $this->generateBulkDummyData(7);
        $first = ' '.$dummyProfilesData[2]['names'][0]['first'];
        $middle  = ' '.$dummyProfilesData[2]['names'][0]['middle'];
        $last = ' '.$dummyProfilesData[2]['names'][0]['last'];

        $this->createProfile($dummyProfilesData);
        $resultComposites = $this->searchFacade->advancedSearch(firstName: $first,middleName: $middle,lastName: $last);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
    }
    public function testSearchFacadeByAdvanceWithMissingRequiredArgument(){
        $this->expectException(MissingRequiredInputException::class);
         $this->searchFacade->advancedSearch();
    }

    public function testSearchFacadeByNameEmpty(){
        $resultComposites = $this->searchFacade->advancedSearch(firstName: ' ');
        $this->assertCount(0,$resultComposites);
    }

    public function testSearchFacadeByNameOnline(){
        $resultComposites = $this->searchFacade->searchByName(name: 'Ahmad',alias: ['pipl']);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
        $this->assertCount(3,$resultComposites);
    }

    public function testSearchFacadeByUserNameOnline(){
        $resultComposites = $this->searchFacade->searchByUsername(username: 'ahmadfds',alias: ['pipl']);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
        $this->assertCount(3,$resultComposites);
    }

    public function testSearchFacadeByEmailOnline(){
        $resultComposites = $this->searchFacade->searchByEmail(email: 'fds@jawabkom.com',alias: ['pipl']);
        $this->assertInstanceOf(IProfileComposite::class, $resultComposites[0]);
        $this->assertCount(3,$resultComposites);
    }

    public function testSearchFacadePhoneOnline(){
        $resultComposites = $this->searchFacade->searchByPhone(phone: '5527153514',possibleCountries: ['TR'],alias: ['pipl']);
        $this->assertCount(3,$resultComposites);
        $this->assertInstanceOf(IProfileComposite::class,$resultComposites[0]);
    }



    /**
     * @param array $dummyProfilesData
     * @return array
     */
    protected function createProfile(array $dummyProfilesData): array
    {
        $fakeProfiles = [];
        $createProfile = $this->di->make(CreateProfile::class);
        foreach ($dummyProfilesData as $profileDummyData) {
            $fakeProfiles[] = $createProfile->input('profile', $profileDummyData)
                ->process()
                ->output('result');
        }
        return $fakeProfiles;
    }

}
